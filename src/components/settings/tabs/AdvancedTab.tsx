"use client";

import React from "react";
import { CanvasElement } from "@/types/element";
import SpacingPanel from "../panels/SpacingPanel";
import VisibilityPanel from "../panels/VisibilityPanel";

interface AdvancedTabProps {
  element: CanvasElement;
  onChange: (k: string, v: string) => void;
  expandedSections: { [key: string]: boolean };
  toggleSection: (sectionKey: string) => void;
}

export default function AdvancedTab({
  element,
  onChange,
  expandedSections,
  toggleSection,
}: AdvancedTabProps) {
  return (
    <div className="space-y-4">
      {/* M√£ ph·∫ßn t·ª≠ */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          M√£ ph·∫ßn t·ª≠
        </label>
        <input
          type="text"
          placeholder="Nh·∫≠p m√£"
          value={element.props.elementId || ""}
          className="w-full p-3 border border-gray-200 rounded-lg text-sm"
          onChange={(e) => onChange("elementId", e.target.value)}
        />
      </div>

      <SpacingPanel
        element={element}
        onChange={onChange}
        expandedSections={expandedSections}
        toggleSection={toggleSection}
      />

      <VisibilityPanel
        element={element}
        onChange={onChange}
        expandedSections={expandedSections}
        toggleSection={toggleSection}
      />

      {/* ƒê·∫∑t gi·ªõi h·∫°n th·ªùi gian */}
      <div className="border border-gray-200 rounded-lg">
        <div
          className="flex items-center justify-between p-3 hover:bg-gray-50 cursor-pointer"
          onClick={() => toggleSection("timeLimit")}
        >
          <span className="text-sm font-medium text-gray-700">
            ƒê·∫∑t gi·ªõi h·∫°n th·ªùi gian
          </span>
          <svg
            className={`w-4 h-4 text-gray-400 transition-transform ${
              expandedSections.timeLimit ? "rotate-90" : ""
            }`}
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M19 9l-7 7-7-7"
            />
          </svg>
        </div>
        {expandedSections.timeLimit && (
          <div className="p-3 border-t border-gray-200 bg-gray-50">
            <div className="space-y-3">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Ki·ªÉu hi·ªÉn th·ªã
                </label>
                <select
                  className="w-full p-2 border border-gray-300 rounded-lg text-sm"
                  onChange={(e) => onChange("timeDisplayType", e.target.value)}
                >
                  <option>Lu√¥n hi·ªÉn th·ªã</option>
                  <option>Kh√¥ng th·ªùi gian</option>
                  <option>L·∫∑p l·∫°i h√†ng ng√†y</option>
                  <option>T√πy ch·ªânh</option>
                </select>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Hi·ªáu ·ª©ng khi di chu·ªôt v√†o */}
      <div className="border border-gray-200 rounded-lg">
        <div
          className="flex items-center justify-between p-3 hover:bg-gray-50 cursor-pointer"
          onClick={() => toggleSection("hoverEffect")}
        >
          <span className="text-sm font-medium text-gray-700">
            Hi·ªáu ·ª©ng khi di chu·ªôt v√†o
          </span>
          <svg
            className={`w-4 h-4 text-gray-400 transition-transform ${
              expandedSections.hoverEffect ? "rotate-90" : ""
            }`}
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M19 9l-7 7-7-7"
            />
          </svg>
        </div>
        {expandedSections.hoverEffect && (
          <div className="p-3 border-t border-gray-200 bg-gray-50">
            <div className="space-y-4">
              {/* M√†u vi·ªÅn */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  M√†u vi·ªÅn
                </label>
                <div className="flex items-center gap-3 p-3 border border-gray-200 rounded-lg bg-white">
                  <input
                    type="color"
                    className="w-8 h-8 border border-gray-300 rounded cursor-pointer"
                    defaultValue="#000000"
                    onChange={(e) =>
                      onChange("hoverBorderColor", e.target.value)
                    }
                  />
                  <input
                    type="text"
                    placeholder="Ch·ªçn m√†u"
                    className="flex-1 text-sm text-gray-500 bg-transparent outline-none"
                    onChange={(e) =>
                      onChange("hoverBorderColor", e.target.value)
                    }
                  />
                </div>
              </div>

              {/* M√†u n·ªÅn */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  M√†u n·ªÅn
                </label>
                <div className="flex items-center gap-3 p-3 border border-gray-200 rounded-lg bg-white">
                  <input
                    type="color"
                    className="w-8 h-8 border border-gray-300 rounded cursor-pointer"
                    defaultValue="#ffffff"
                    onChange={(e) =>
                      onChange("hoverBackgroundColor", e.target.value)
                    }
                  />
                  <input
                    type="text"
                    placeholder="Ch·ªçn m√†u"
                    className="flex-1 text-sm text-gray-500 bg-transparent outline-none"
                    onChange={(e) =>
                      onChange("hoverBackgroundColor", e.target.value)
                    }
                  />
                </div>
              </div>

              {/* M√†u ch·ªØ */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  M√†u ch·ªØ
                </label>
                <div className="flex items-center gap-3 p-3 border border-gray-200 rounded-lg bg-white">
                  <input
                    type="color"
                    className="w-8 h-8 border border-gray-300 rounded cursor-pointer"
                    defaultValue="#000000"
                    onChange={(e) => onChange("hoverTextColor", e.target.value)}
                  />
                  <input
                    type="text"
                    placeholder="Ch·ªçn m√†u"
                    className="flex-1 text-sm text-gray-500 bg-transparent outline-none"
                    onChange={(e) => onChange("hoverTextColor", e.target.value)}
                  />
                </div>
              </div>

              {/* Trong su·ªët v√† Ph√≥ng to */}
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Trong su·ªët
                  </label>
                  <div className="flex items-center border border-gray-200 rounded-lg bg-white">
                    <input
                      type="number"
                      defaultValue="100"
                      className="flex-1 p-2 text-sm bg-transparent outline-none text-center"
                      onChange={(e) => onChange("hoverOpacity", e.target.value)}
                    />
                    <span className="text-sm text-gray-500 pr-3">%</span>
                  </div>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Ph√≥ng to
                  </label>
                  <div className="flex items-center border border-gray-200 rounded-lg bg-white">
                    <input
                      type="number"
                      defaultValue="100"
                      className="flex-1 p-2 text-sm bg-transparent outline-none text-center"
                      onChange={(e) => onChange("hoverScale", e.target.value)}
                    />
                    <span className="text-sm text-gray-500 pr-3">%</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* Footer help text */}
      <div className="mt-8 pt-4 border-t border-gray-200">
        <div className="flex items-start gap-2 text-xs text-gray-500">
          <span className="text-base">üòä</span>
          <div>
            <span className="text-blue-600 underline cursor-pointer">
              G√≥p √Ω t√≠nh nƒÉng n√†y
            </span>
            <span> ƒë·ªÉ ch√∫ng t√¥i gi√∫p b·∫°n tr·∫£i nghi·ªám t·ªët h∆°n</span>
          </div>
        </div>
      </div>
    </div>
  );
}
